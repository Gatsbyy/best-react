调研：

整体前端技术栈选型

1. 工具链
2. 工程化
3. CI/CD
4. 性能/数据/键控指标

数据可视化及数据BI
1. 基础图标库
2. BI基础能力
3. 数据模型及BI整体分层

建站工具（B端系统和可视化建站）

微前端整体方案
1. 基座方案
2. 引入及接入方案
3. 功能权限及数据权限方案

Why Not Iframe
为什么不用 iframe，这几乎是所有微前端方案第一个会被 challenge 的问题。但是大部分微前端方案又不约而同放弃了 iframe 方案，自然是有原因的，并不是为了 "炫技" 或者刻意追求 "特立独行"。
 
如果不考虑体验问题，iframe 几乎是最完美的微前端解决方案了。

iframe 最大的特性就是提供了浏览器原生的硬隔离方案，不论是样式隔离、js 隔离这类问题统统都能被完美解决。但他的最大问题也在于他的隔离性无法被突破，导致应用间上下文无法被共享，随之带来的开发体验、产品体验的问题。
 
其实这个问题之前这篇也提到过，这里再单独拿出来回顾一下好了。
 
1. url 不同步。浏览器刷新 iframe url 状态丢失、后退前进按钮无法使用。
2. UI 不同步，DOM 结构不共享。想象一下屏幕右下角 1/4 的 iframe 里来一个带遮罩层的弹框，同时我们要求这个弹框要浏览器居中显示，还要浏览器 resize 时自动居中..
3. 全局上下文完全隔离，内存变量不共享。iframe 内外系统的通信、数据同步等需求，主应用的 cookie 要透传到根域名都不同的子应用中实现免登效果。
4. 慢。每次子应用进入都是一次浏览器上下文重建、资源重新加载的过程。
 
其中有的问题比较好解决(问题1)，有的问题我们可以睁一只眼闭一只眼(问题4)，但有的问题我们则很难解决(问题3)甚至无法解决(问题2)，而这些无法解决的问题恰恰又会给产品带来非常严重的体验问题， 最终导致我们舍弃了 iframe 方案。

前端埋点方案：
1.无代码侵入，可视化埋点
2.运营可配置化
3.埋点数据可视化展示

前端工程化：
一切以提高效率、降低成本、质量保证为目的的手段都属于工程化。
一切重复的工作都应该被工程化。

工程化步骤：
创建项目->编码->预览/测试->提交->部署
1. 借助脚手架创建项目目录结构或者特定类型的文件
2. 编码阶段：借助工具实现代码格式、风格校验，一切规范化要求都要用工具来检查。
3. 预览/测试阶段： mock
4. 提交阶段：使用commitizen做格式校验，保证提交测试代码质量，无需做UI调整，逻辑bug少于5个。
5. 部署，CI/CD，自动发布。

工程化的核心不是工具，工程化的核心是对项目的整体规划和架构，
一个项目的工程化，首先要规划出一个项目整体的工作流架构。
如文件组织结构（按作用分层、按业务分层）、代码开发范式（语法、规范、标准、语言，如 ES6+、TypeScript 等）、前后端分离方式（Ajax 和中间层）。
规划完工作流整体架构以后，再来考虑使用哪些工具来实现这套规划。
可以借鉴目前业界成熟的工程化方案中的思路，如 create-react-app、vue-cli、angluar-cli、gatsby-cli 等。
它们并不是一个简单的项目生成脚手架，而是工程化工具的集成。





想法：
1. 可视化包括两部分，
    1. 团队内部使用的toCP(外部商户等)的组件库，可基于echarts等其他图表框架建设
    2. 用户toMiss（内部数据分析师、运营人员等）的Bi工具，如Davinci、SuperSet等
2. 用户控制台项目，使用微前端架构，基于Umi+qiankun，待调研，启动项目demo，后期随着需求和项目的增多，方便扩展和分项目发布，互不影响
3. 前端架构Umi（项目搭建）+React（逐步转向hooks写法）+Dva（数据流管理）+Antd（UI）+可视化，约定大于配置，依赖更新节奏设定（指定负责人）
4. 质量保障体系：前端监控系统，包括静态资源加载error，超时，接口出错报警等，探索通过无代码侵入方式实现
5. 交付规范
6. 代码提交规范
7. 前端开发规范
8. 发布体系


